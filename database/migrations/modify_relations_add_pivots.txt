<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class ModifyRelationsAddPivots extends Migration
{
    public function up()
    {
        // -------------------------
        // PIVOTE cliente_representante (con campos de nombramiento)
        // -------------------------
        if (!Schema::hasTable('cliente_representante')) {
            Schema::create('cliente_representante', function (Blueprint $table) {
                $table->id();
                $table->unsignedBigInteger('cliente_id');
                $table->unsignedBigInteger('representante_id');

                // campos de nombramiento (copiar desde representantes si existen)
                $table->date('fecha_nombramiento')->nullable();
                $table->integer('duracion_meses')->nullable();
                $table->date('fecha_fin_nombramiento')->nullable();
                $table->string('numero_acta', 100)->nullable();
                $table->string('numero_acuerdo', 100)->nullable();

                $table->boolean('activo')->default(true); // permite consultar el vigente
                $table->timestamps();

                $table->index('cliente_id', 'cr_cliente_idx');
                $table->index('representante_id', 'cr_representante_idx');

                $table->foreign('cliente_id', 'cr_cliente_fk')
                      ->references('id')->on('clientes')->onDelete('cascade');
                $table->foreign('representante_id', 'cr_representante_fk')
                      ->references('id')->on('representantes')->onDelete('cascade');
            });
        }

        // -------------------------
        // PIVOTE cliente_auditor (con campos de nombramiento)
        // -------------------------
        if (!Schema::hasTable('cliente_auditor')) {
            Schema::create('cliente_auditor', function (Blueprint $table) {
                $table->id();
                $table->unsignedBigInteger('cliente_id');
                $table->unsignedBigInteger('auditor_id');

                // campos de nombramiento
                $table->date('fecha_nombramiento')->nullable();
                $table->date('fecha_fin_nombramiento')->nullable();
                $table->boolean('activo')->default(true);
                $table->string('notas', 500)->nullable();

                $table->timestamps();

                $table->index('cliente_id', 'ca_cliente_idx');
                $table->index('auditor_id', 'ca_auditor_idx');

                $table->foreign('cliente_id', 'ca_cliente_fk')
                      ->references('id')->on('clientes')->onDelete('cascade');
                $table->foreign('auditor_id', 'ca_auditor_fk')
                      ->references('id')->on('auditores')->onDelete('cascade');
            });
        }

        // -------------------------
        // Migrar datos existentes de representantes.cliente_id y campos de nombramiento
        // -------------------------
        if (Schema::hasTable('representantes')) {
            // Si la tabla representantes tiene columna cliente_id o campos de nombramiento,
            // los copiamos a cliente_representante.
            $cols = Schema::getColumnListing('representantes');
            $hasClienteId = in_array('cliente_id', $cols);
            $hasFechaNom = in_array('fecha_nombramiento', $cols);
            $hasDuracion = in_array('duracion_meses', $cols);
            $hasFechaFin = in_array('fecha_fin_nombramiento', $cols);
            $hasActa = in_array('numero_acta', $cols);
            $hasAcuerdo = in_array('numero_acuerdo', $cols);

            if ($hasClienteId) {
                DB::table('representantes')->select('id', 'cliente_id', 'fecha_nombramiento', 'duracion_meses', 'fecha_fin_nombramiento', 'numero_acta', 'numero_acuerdo')
                    ->whereNotNull('cliente_id')
                    ->orderBy('id')
                    ->chunkById(200, function ($rows) use ($hasFechaNom, $hasDuracion, $hasFechaFin, $hasActa, $hasAcuerdo) {
                        $inserts = [];
                        foreach ($rows as $r) {
                            $inserts[] = [
                                'cliente_id' => $r->cliente_id,
                                'representante_id' => $r->id,
                                'fecha_nombramiento' => $hasFechaNom ? $r->fecha_nombramiento : null,
                                'duracion_meses' => $hasDuracion ? $r->duracion_meses : null,
                                'fecha_fin_nombramiento' => $hasFechaFin ? $r->fecha_fin_nombramiento : null,
                                'numero_acta' => $hasActa ? $r->numero_acta : null,
                                'numero_acuerdo' => $hasAcuerdo ? $r->numero_acuerdo : null,
                                'activo' => (isset($r->fecha_fin_nombramiento) && $r->fecha_fin_nombramiento !== null) ? false : true,
                                'created_at' => now(),
                                'updated_at' => now(),
                            ];
                        }
                        if (!empty($inserts)) {
                            DB::table('cliente_representante')->insertOrIgnore($inserts);
                        }
                    });

                // eliminar la columna representantes.cliente_id (si existe)
                Schema::table('representantes', function (Blueprint $table) {
                    try {
                        $table->dropForeign(['cliente_id']);
                    } catch (\Exception $e) {
                        // ignore
                    }
                    try {
                        $table->dropColumn('cliente_id');
                    } catch (\Exception $e) {
                        // ignore
                    }
                });
            }
        }

        // -------------------------
        // Si existe cliente_auditor antigua sin campos, podemos actualizar sus filas
        // -------------------------
        if (Schema::hasTable('cliente_auditor')) {
            // Si hay filas existentes con created_at, y las nuevas columnas existen (en caso de migración incremental):
            try {
                // establecer fecha_nombramiento = created_at donde fecha_nombramiento IS NULL
                DB::table('cliente_auditor')
                    ->whereNull('fecha_nombramiento')
                    ->update(['fecha_nombramiento' => DB::raw('created_at')]);
            } catch (\Exception $e) {
                // ignore si no se puede (ej. columnas no existen si no fue migración incremental)
            }
        }

        // 5) Quitar UNIQUE en tareas_clientes (tarea_id, cliente_id) si aplica
        if (Schema::hasTable('tareas_clientes')) {
            Schema::table('tareas_clientes', function (Blueprint $table) {
                try {
                    $table->dropUnique('tareas_clientes_tarea_id_cliente_id_unique');
                } catch (\Exception $e) {
                    try { $table->dropUnique(['tarea_id', 'cliente_id']); } catch (\Exception $e2) {}
                }
            });
        }

        // 6) Agregar índice en tareas_instancia_valores.valor_fecha
        if (Schema::hasTable('tareas_instancia_valores')) {
            Schema::table('tareas_instancia_valores', function (Blueprint $table) {
                try {
                    $table->index('valor_fecha', 'tareas_instancia_valores_valor_fecha_index');
                } catch (\Exception $e) {
                    // ignore
                }
            });
        }
    }

    public function down()
    {
        // Restaurar columna representantes.cliente_id si no existe (intentamos)
        if (!Schema::hasColumn('representantes', 'cliente_id')) {
            Schema::table('representantes', function (Blueprint $table) {
                $table->unsignedBigInteger('cliente_id')->nullable()->after('id');
            });

            if (Schema::hasTable('cliente_representante')) {
                // Poblar representantes.cliente_id desde cliente_representante (primer mapping)
                $rows = DB::table('cliente_representante')
                    ->select('representante_id', 'cliente_id')
                    ->orderBy('representante_id')
                    ->get();

                $firstByRep = [];
                foreach ($rows as $r) {
                    if (!isset($firstByRep[$r->representante_id])) {
                        $firstByRep[$r->representante_id] = $r->cliente_id;
                    }
                }
                foreach ($firstByRep as $repId => $clienteId) {
                    DB::table('representantes')->where('id', $repId)->update(['cliente_id' => $clienteId]);
                }

                try {
                    Schema::table('representantes', function (Blueprint $table) {
                        $table->foreign('cliente_id', 'representantes_cliente_id_foreign')
                              ->references('id')->on('clientes')->onDelete('cascade');
                    });
                } catch (\Exception $e) {
                    // ignore
                }
            }
        }

        // Re-crear UNIQUE en tareas_clientes (tarea_id, cliente_id) si es necesario
        if (Schema::hasTable('tareas_clientes')) {
            Schema::table('tareas_clientes', function (Blueprint $table) {
                try {
                    $table->unique(['tarea_id', 'cliente_id'], 'tareas_clientes_tarea_id_cliente_id_unique');
                } catch (\Exception $e) {}
            });
        }

        // Eliminar índice valor_fecha
        if (Schema::hasTable('tareas_instancia_valores')) {
            Schema::table('tareas_instancia_valores', function (Blueprint $table) {
                try { $table->dropIndex('tareas_instancia_valores_valor_fecha_index'); } catch (\Exception $e) {
                    try { $table->dropIndex(['valor_fecha']); } catch (\Exception $e2) {}
                }
            });
        }

        // Eliminar pivotes (esto borrará datos de relación)
        if (Schema::hasTable('cliente_auditor')) {
            Schema::dropIfExists('cliente_auditor');
        }
        if (Schema::hasTable('cliente_representante')) {
            Schema::dropIfExists('cliente_representante');
        }
    }
}
